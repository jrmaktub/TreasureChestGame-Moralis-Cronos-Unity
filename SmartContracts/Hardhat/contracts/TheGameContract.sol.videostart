// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;


///////////////////////////////////////////////////////////
// IMPORTS
///////////////////////////////////////////////////////////
import "hardhat/console.sol";
import "contracts/Gold.sol";
import "contracts/TreasurePrize.sol";
import "classes/Reward.sol";
import { TheGameLibrary } from "libraries/TheGameLibrary.sol";


///////////////////////////////////////////////////////////
// CLASS
//      *   Description         :   The proxy contact
//                                  for all other contracts
//      *   Deployment Address  :   
///////////////////////////////////////////////////////////
contract TheGameContract
{


    ///////////////////////////////////////////////////////////
    // FIELDS
    //      *   Values stored on contract
    ///////////////////////////////////////////////////////////

    // Stores address of the Gold contract, to be called
    address _goldContractAddress;

    // Stores address of the TreasurePrize contract, to be called
    address _treasurePrizeContractAddress;

    mapping(address => bool) private _isRegistered;

    // Stores the most recent reward
    mapping (address => Reward) private _lastReward;


    ///////////////////////////////////////////////////////////
    // CONSTRUCTOR
    //      *   Runs when contract is executed
    ///////////////////////////////////////////////////////////
    constructor(address goldContractAddress, address treasurePrizeContractAddress) 
    {
        // TODO: Add code...
    }
    
    
    ///////////////////////////////////////////////////////////
    // MODIFIERS 
    ///////////////////////////////////////////////////////////
    modifier ensureIsRegistered (address userAddress)
    {
        // Validate
        require(_isRegistered[userAddress], "Must be registered");

        // Execute rest of function
      _;
    }


    ///////////////////////////////////////////////////////////
    // FUNCTIONS: GETTERS
    ///////////////////////////////////////////////////////////
    function getIsRegistered(address userAddress) public view returns (bool isRegistered) 
    {
        // TODO: Add code...
    }


    function getGold(address userAddress) public view ensureIsRegistered (userAddress) returns (uint256 balance) 
    {
        // TODO: Add code...
    }


    function getRewardsHistory(address userAddress) external view ensureIsRegistered (userAddress) returns (string memory rewardString)
    {
        // TODO: Add code...
    }


    ///////////////////////////////////////////////////////////
    // FUNCTIONS: REGISTRATION
    ///////////////////////////////////////////////////////////
    function register() public
    {
        // TODO: Add code...
    }


    function unregister() public ensureIsRegistered (msg.sender)
    {

        // TODO: Add code...

        //Update gold first
        

        //Then unregister
        

    }


    ///////////////////////////////////////////////////////////
    // FUNCTIONS: REWARDS
    ///////////////////////////////////////////////////////////
    function startGameAndGiveRewards(uint256 goldAmount) ensureIsRegistered (msg.sender) external
    {
        // TODO: Add code...
    }


    ///////////////////////////////////////////////////////////
    // FUNCTIONS: CLEAR DATA
    ///////////////////////////////////////////////////////////
    function safeReregisterAndDeleteAllTreasurePrizes(uint256[] calldata tokenIds) external
    {
        // TODO: Add code...
    }


    ///////////////////////////////////////////////////////////
    // FUNCTIONS: GOLD
    ///////////////////////////////////////////////////////////
    function setGold(uint256 targetBalance) ensureIsRegistered (msg.sender) public
    {
        // TODO: Add code...
    }


    function setGoldBy(int delta) ensureIsRegistered (msg.sender) public
    {
         // TODO: Add code...
    }


    ///////////////////////////////////////////////////////////
    // FUNCTIONS: TREASURE PRIZE
    ///////////////////////////////////////////////////////////
    function addTreasurePrize(string memory tokenURI) ensureIsRegistered (msg.sender)  public 
    {
        // TODO: Add code...
    }


    function deleteAllTreasurePrizes(uint256[] calldata tokenIds) ensureIsRegistered (msg.sender)  public
    {
        // TODO: Add code...
    }


    function sellTreasurePrize(uint256 tokenId) ensureIsRegistered (msg.sender)  external
    {
        // TODO: Add code...
    }
}


